1강 
- 페이스가 빠릅니다. 

//컴퓨터는 뭐하는 애야?
- 여러줄을 한꺼번에 계산, 단계적으로 수행,

//컴퓨터적 사고
- 계산할 수 있는 것과 없는 것을 구분, 문제를 컴퓨터적 사고로 변환 
-------------------------------------------------------------------------------------------
2강
//버그 
- 프로그램에 문제를 만드는 애들, 3가지 종류

**에러 종류 
- syntax error    : 문법 오류, 부분 점수 없음,  
- Runtime error : 실행하다가 죽음, 
- Semantic error : 결과가 다름, 틀린 결과가 나옴, 잡아내기가 가장 힘듦

//괄호
( ) : 소괄호, Parentheses
[ ] : 중괄호, brakets
{ } : 대괄호, braces 

//오퍼레이팅 원리

//Python shell interaction 
- 연산자 살펴보기 

//0.666666666666666~
- 컴퓨터의 2진수 표현의 한계

//Variables 
- degrees_celsius = 26.0 : assign
- 지정의 의미이지 같다는 의미가 아니다. 
- 원리 : 무조건 주소값 저장,(객체화) 

//문장을 기억하세요
- value 26 has ~~
 
-------------------------------------------------------------------------------------------
3강 
//수학의 함수 
- 입력과 출력이 있고, x와 y의 변수로 이뤄짐, 
- abs(-9) 절대값, pow(3,2) 제곱(3의 제곱), round(4.3) 반올림 
- round(3.142, 2) 2자리수까지

//Typecast 
- 자료의 형태를 바꿔줌, int, float, 

//help()
- help(abs) 하면 알려줌 input = parameter = argument 
- 출력값 = 반환 = output = return **혼용 주의 
- 화면출력과 함수 출력은 다름(print 와 return)
- z=none 은 넣어도 되고 안넣어도 됨 

//id : memory address
- 변수는 값을 저장하는게 아니라 값의 메모리 주소를 저장 
- 파이썬이 많이쓰이는 정수는 미리 객체를 만들어 둠(주소값이 같다)

//Define Own Funtions 
- 변수 이름을 구체적으로 쓰는 것도 좋음
- def 만들고자하는 함수(입력 파라미터)(콜론)
        return 계산 

//Keywords
- 미리 정해둔 단어, 변수명이나 함수명으로 사용 불가 

//Local variables
- 해당 지역 안에서만 쓰임, 
- return 이 제일 마지막 줄, 
- function parameter들도 지역변수 

//Errors
- 정의 후 호출 시 파라미터 개수 틀림
- 함수 이미 있는데 이름을 덮어씀
- 지역변수 오류 

// Local varialbes and namespaces 
- 26이라는 수가 id1에 저장되고 id의 메모리 주소가 변수에 저장 
- 함수는 shell과 다른 공간에 생김, 메모리 상에서는 이웃 사촌

//**Tracing Function calls 
- 메모리 모델이 어떻게 굴러가는지 파악하기 

//윈도우에서 에디터
- 에디터와 쉘의 차이는 에디터는 print를 줘야 실행, 
- 출력은(print) 함수는 반환(return)   
- shell 에서 file new file 누르면 에디터 됨      

-------------------------------------------------------------------------------------------
4강 함수 2 

- 시험이나 퀴즈 시 help 사용 가능
- return 이 없는 함수를 정의한 뒤 변수에 담으면 none, 자동으로 none 이 들어감 
- return 없으면 자동으로 none이 들어감 
  example
	def say():
	    print('hello')
	result = say() 
	print(result)
 결과는 hello와 none 

//Design a new function 
- 함수의 기능부터 생각(idea), 입력 파라미터 결정, 반환값, 마지막 function body

//Docstring 
- 사람이 읽기 쉽게 만들어 놓은 함수, 다른 사람에게 공유할 때 이해 할 수 있도록 도움 
- 0. Function header def ~~~(!!!, !!!):
- """(큰따옴표 3개는 Docstring), 일종의 메뉴얼,
- 1. 맨처음 반환값의 자료형(int, int)
- 2. 함수에 대한 자세한 설명
- 3. 콜링 예시 함수와 리턴값
- 4. """닫기 
- 5. Function body ~~

- 파이썬에서 help(함수명)을 입력하면 해당 함수의 정보를 알 수 있음 

//Problem Designs
- 3가지 함수, 

//** Function Desgin Recipe
- Examples, Type contract, Header, Description, body, test  
-------------------------------------------------------------------------------------------

5강 string 

//string 
- 문자열로 표현할 수 있는 모든 것, 

// How to define a string?
- 단따옴표, 곁따옴표 모두 사용가능, 

//Empty string 
- 열고 바로 닫음, "", '', 

//operations in string 
- len(str) : 스트링의 길이 반환, 띄어쓰기도 한 칸으로 침, 
- + : 스트링 더하기 스트링은 이어 붙여줌, 스트링이랑 숫자랑 섞으면 안됨, 숫자는 str()을 통해 문자로 변환 가능
- typecast : 자료형 변환
- * : 문자를 반복해줌, 

// string 특수 캐릭터
- 문장 묶을 때 단따옴표 문제(''')/ 큰따옴표 쓰세요. 
- 대화체는 바깥에 ' 넣고 안에 "

// Escape sequence 
- 보통의 문법에서 벗어남
- 눈으로 보기엔 2개인데 하나로 봄 

//줄바꿈 
- ' \n' 또는 
- '\t' 끝나는 위치와 시작이 일정하게 띄워줌(일정 정렬)

//print
- 중간에 쉼표 넣으면 자동 띄어쓰기, 
- sep : 사이에 넣어줄 문자 
- end : 종결자가 원래 new line, 바꿀 수 있음 

//input 
- 입력받은 값은 항상 string, 덧셈이 안됨(int 주기 또는 input 자체 int 주기), 
- input(''여기 입력 가능')


//Slicing
- step : [1:8:2]
- [12:-13]은 안되는데 [12:13:-1]은 가능
- [::-1] 처음부터 끝까지 거꾸로 가라 

-------------------------------------------------------------------------------------------
6강 불리언

//Making choice 
- not :  unary operator, 
- or, and : binary operators,
- a xor b : a와 b 둘 다 아님 

//Relational operators
- 크다 : Greater than
- =는 지정, ==는 같다. 

//How to use booleans?
- 표 부분 보기 

- None도 False
- 엠티 스트링도 False 
- 0 == False, 1 == True, 0과 1은 not 연산 가능하나 비교 연산자는 안될 수도 있음
 
- or는 True 가 하나라도 있으면 바로 트루를 떄리고 True
- and 는 False가 하나라도 있으면 바로 False 때림
- 예시 (2/3) or (1/0) 

// 문자열 비교
- 아스키 코드 넘버로 구분 
- lexicographically(사전 순) 더 뒤에 있을수록 더 크다. 한글 도 마찬가지, 

// in operation 
- in 왼쪽의 substring이 in 오른쪽의 string에 포함되는가? 
- 엠티스트링은 in 에서 항상 true

-------------------------------------------------------------------------------------------

Part 7 

//if Statement 
  불리언이 될 수도 있는 조건 사용, 

//Use of Boolean variable

-------------------------------------------------------------------------------------------
Part 8

모듈 

//파이썬 모듈은 한번 호출하면 돌아오지 않음, 

//랜덤함수 
   
// 그래픽 터틀 
